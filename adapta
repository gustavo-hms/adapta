#!/usr/bin/fish

function -d "Update desktop list" update 
	switch $argv[1]
		case node_manage
			new-window $argv[2..-1]
		case node_unmanage desktop_focus
			scan-to-be-closed $argv[2..-1]
	end
end

function -d "Check if a new window demands a new desktop" new-window
	set -l monitor $argv[1]
	set -l desktop $argv[2]

	if is-last-desktop $monitor $desktop
		create-desktop $monitor
	end
end

function -d "Search for desktops that need to be closed" scan-to-be-closed
	set -l monitor $argv[1]

	for desktop in (desktops $monitor)
		if is-last-desktop $monitor $desktop
			# There must always be a last empty desktop
			return
		end

		if is-empty $desktop -a !is-focused $desktop
			remove-desktop $monitor $desktop
		end
	end
end

function create-desktop -a monitor
	set -l number (count (bspc query --monitor $monitor --desktops))
	bspc monitor $monitor --add-desktops (math $number + 1)
end

function desktops -a monitor
	bspc query --monitor $monitor --desktops
end

function is-focused -a desktop
	test $desktop = (bspc query --desktop focused --desktops)
end

function is-empty -a desktop
	test -eq 0 (count (bspc query --desktop $desktop --nodes))
end

function is-last-desktop -a monitor desktop
	test $desktop = (desktops $monitor)[-1]
end

function remove-desktop -a monitor desktop
	bspc desktop $desktop --remove

	# Rename desktops
	set -l names (seq 1 (count (bspc query --monitor $monitor --desktops)))
	bspc monitor $monitor --reset-desktops $names
end

set channel /tmp/channel(random)
mkfifo $channel

bspc subscribe node_manage node_unmanage desktop_focus > $channel &

while read -la event < $channel
	update $event
end
